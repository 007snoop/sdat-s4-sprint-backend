name: Build, Push to ECR, and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: airportsim-backend
  IMAGE_TAG: ${{ github.sha }}
  DOCKER_PLATFORM: linux/amd64

concurrency:
  group: airportsim-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    outputs:
      ecr_uri: ${{ steps.meta.outputs.ecr_uri }}
      image_sha: ${{ steps.meta.outputs.image_sha }}
      image_latest: ${{ steps.meta.outputs.image_latest }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Build JAR
        run: |
          chmod +x ./mvnw
          ./mvnw -q clean package -DskipTests

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::876455127118:role/GitHubActions-Flight-Role
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: gha-${{ github.run_id }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Compute ECR URI and tags
        id: meta
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "ecr_uri=${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}" >> "$GITHUB_OUTPUT"
          echo "image_sha=${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}" >> "$GITHUB_OUTPUT"
          echo "image_latest=${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:latest" >> "$GITHUB_OUTPUT"

      - name: Ensure repo exists
        run: |
          aws ecr describe-repositories --repository-names "$ECR_REPOSITORY" --region "$AWS_REGION" >/dev/null 2>&1 \
          || aws ecr create-repository --repository-name "$ECR_REPOSITORY" --region "$AWS_REGION" >/dev/null

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push (sha + latest)
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ env.DOCKER_PLATFORM }}
          push: true
          tags: |
            ${{ steps.meta.outputs.image_sha }}
            ${{ steps.meta.outputs.image_latest }}
          cache-from: type=registry,ref=${{ steps.meta.outputs.ecr_uri }}:buildcache
          cache-to: type=registry,ref=${{ steps.meta.outputs.ecr_uri }}:buildcache,mode=max

  deploy:
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: SSH into EC2 and deploy (blue/green)
        uses: appleboy/ssh-action@v1.2.0
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          ECR_URI: ${{ needs.build-and-push.outputs.ecr_uri }}
          IMAGE: ${{ needs.build-and-push.outputs.image_latest }}

          # Frontend/CORS + seeding toggles (override via repo secrets if you want)
          FRONTEND_ORIGINS: ${{ secrets.FRONTEND_ORIGINS || 'http://localhost:3000,http://127.0.0.1:3000,http://localhost:5173,http://127.0.0.1:5173' }}
          APP_SEED_ENABLED: ${{ secrets.APP_SEED_ENABLED || 'false' }}

          # Optional DB envs (only needed if useAwsSecrets=false in the app)
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: AWS_REGION,ECR_URI,IMAGE,FRONTEND_ORIGINS,APP_SEED_ENABLED,DB_HOST,DB_PORT,DB_NAME,DB_USER,DB_PASS
          script: |
            set -euo pipefail

            APP_NAME="airportsim"
            NEW_NAME="airportsim_new_$RANDOM"

            # Ensure prereqs
            if ! command -v docker >/dev/null 2>&1; then
              sudo yum -y install docker || sudo dnf -y install docker
              sudo systemctl enable --now docker
              sudo usermod -aG docker ec2-user || true
            fi
            if ! command -v aws >/dev/null 2>&1; then
              sudo yum -y install awscli || sudo dnf -y install awscli
            fi
            if ! command -v curl >/dev/null 2>&1; then
              sudo yum -y install curl || sudo dnf -y install curl
            fi

            # ECR login + pull (uses EC2 instance role)
            aws ecr get-login-password --region "$AWS_REGION" | docker login --username AWS --password-stdin "$ECR_URI"
            docker pull "$IMAGE"

            # Cleanup any previous blue containers
            for c in $(docker ps -a --format '{{.Names}}' | grep -E '^airportsim_new_' || true); do
              docker rm -f "$c" || true
            done

            # Start candidate on 8081 (host) -> 8080 (container)
            # Health: use curl to /actuator/health (context path = "/")
            docker run -d \
              --name "$NEW_NAME" \
              -p 8081:8080 \
              --restart unless-stopped \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e JAVA_TOOL_OPTIONS="-Xms256m -Xmx768m -XX:MaxMetaspaceSize=256m" \
              -e FRONTEND_ORIGINS="$FRONTEND_ORIGINS" \
              -e APP_SEED_ENABLED="$APP_SEED_ENABLED" \
              ${DB_HOST:+-e DB_HOST="$DB_HOST"} \
              ${DB_PORT:+-e DB_PORT="$DB_PORT"} \
              ${DB_NAME:+-e DB_NAME="$DB_NAME"} \
              ${DB_USER:+-e DB_USER="$DB_USER"} \
              ${DB_PASS:+-e DB_PASS="$DB_PASS"} \
              "$IMAGE"

            echo "Waiting for $NEW_NAME (port 8081) health..."
            # Try up to ~2 minutes
            ok=false
            for i in {1..24}; do
              if curl -fsS http://localhost:8081/actuator/health | grep -q '"status":"UP"'; then
                ok=true; break
              fi
              echo "Health(8081): starting"
              sleep 5
            done
            if ! $ok; then
              echo "New container did not become healthy. Recent logs:"
              docker logs --tail=200 "$NEW_NAME" || true
              docker rm -f "$NEW_NAME" || true
              exit 1
            fi

            # Cut over: run stable on port 80 -> 8080
            docker rm -f "$APP_NAME" || true
            docker run -d \
              --name "$APP_NAME" \
              -p 80:8080 \
              --restart always \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e JAVA_TOOL_OPTIONS="-Xms256m -Xmx768m -XX:MaxMetaspaceSize=256m" \
              -e FRONTEND_ORIGINS="$FRONTEND_ORIGINS" \
              -e APP_SEED_ENABLED="$APP_SEED_ENABLED" \
              ${DB_HOST:+-e DB_HOST="$DB_HOST"} \
              ${DB_PORT:+-e DB_PORT="$DB_PORT"} \
              ${DB_NAME:+-e DB_NAME="$DB_NAME"} \
              ${DB_USER:+-e DB_USER="$DB_USER"} \
              ${DB_PASS:+-e DB_PASS="$DB_PASS"} \
              "$IMAGE"

            echo "Waiting for $APP_NAME (port 80) readiness..."
            ok=false
            for i in {1..12}; do
              if curl -fsS http://localhost/actuator/health | grep -q '"status":"UP"'; then
                ok=true; break
              fi
              echo "Health(80): not ready yet"
              sleep 5
            done
            if ! $ok; then
              echo "Stable container not ready. Recent logs:"
              docker logs --tail=200 "$APP_NAME" || true
              exit 1
            fi

            # Cleanup blue
            docker rm -f "$NEW_NAME" || true
            docker image prune -f || true

            # Show final status
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
