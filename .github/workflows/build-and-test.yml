name: Build, Push to ECR, and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: airportsim-backend
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    outputs:
      ecr_uri: ${{ steps.push.outputs.ecr_uri }}
      image: ${{ steps.push.outputs.image }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - run: chmod +x ./mvnw
      - name: Build JAR
        run: ./mvnw clean package -DskipTests

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::876455127118:role/GitHubActions-Flight-Role
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: gha-${{ github.run_id }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure repo, build, and push
        id: push
        run: |
          set -e
          # Create repo if missing
          if ! aws ecr describe-repositories --repository-names "$ECR_REPOSITORY" --region "$AWS_REGION" >/dev/null 2>&1; then
            aws ecr create-repository --repository-name "$ECR_REPOSITORY" --region "$AWS_REGION" >/dev/null
          fi

          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ECR_URI="${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}"

          docker build -t "$ECR_URI:$IMAGE_TAG" .
          docker push "$ECR_URI:$IMAGE_TAG"

          echo "ecr_uri=$ECR_URI" >> "$GITHUB_OUTPUT"
          echo "image=$ECR_URI:$IMAGE_TAG" >> "$GITHUB_OUTPUT"

  deploy:
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::876455127118:role/GitHubActions-Flight-Role
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: gha-deploy-${{ github.run_id }}

      - name: SSH into EC2 and deploy
        uses: appleboy/ssh-action@v1.2.0
        env:
          # pass values to the remote shell
          AWS_REGION: ${{ env.AWS_REGION }}
          ECR_URI: ${{ needs.build-and-push.outputs.ecr_uri }}
          IMAGE: ${{ needs.build-and-push.outputs.image }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: AWS_REGION,ECR_URI,IMAGE
          script: |
            set -e

            # Ensure AWS CLI & Docker exist (safe to re-run)
            if ! command -v aws >/dev/null 2>&1; then
              sudo yum -y install awscli || sudo dnf -y install awscli
            fi
            if ! command -v docker >/dev/null 2>&1; then
              sudo yum -y install docker || sudo dnf -y install docker
              sudo systemctl enable --now docker
              sudo usermod -aG docker ec2-user || true
            fi

            # Login to ECR (instance must have IAM role with ECR read)
            aws ecr get-login-password --region "$AWS_REGION" | docker login --username AWS --password-stdin "$ECR_URI"

            # Deploy container
            docker pull "$IMAGE"
            docker stop airportsim || true
            docker rm airportsim || true
            docker run -d \
              --name airportsim \
              -p 80:8080 \
              --restart always \
              -e AWS_REGION="$AWS_REGION" \
              -e useAwsSecrets=true \
              "$IMAGE"
